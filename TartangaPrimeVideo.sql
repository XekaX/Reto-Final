/*CREATE DATABASE TartangaPrimeVideo;
USE TartangaPrimeVideo;

CREATE TABLE TRABAJADOR 
(ID_T VARCHAR(20) PRIMARY KEY,
CONTRASENIA VARCHAR(20),
NOMBRE VARCHAR(20),
SUELDO FLOAT,
TIPO ENUM("ADMIN", "TRABAJADOR") NOT NULL);

CREATE TABLE GENERO
(ID_G VARCHAR(20) PRIMARY KEY,
CATEGORIA VARCHAR(20));

CREATE TABLE PELICULA
(ID_P VARCHAR(20) PRIMARY KEY,
NOMBRE VARCHAR(20),
PRECIO FLOAT,
DURACION INT,
CALIFICACION FLOAT,
ID_G VARCHAR(20),
ID_T VARCHAR(20),
FOREIGN KEY (ID_G) REFERENCES GENERO (ID_G) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (ID_T) REFERENCES TRABAJADOR (ID_T) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE CLIENTE
(DNI CHAR(9) PRIMARY KEY,
NOMBRE VARCHAR(20),
CONTRASENIA VARCHAR(20));

CREATE TABLE COMPRA 
(DNI CHAR(9),
ID_P VARCHAR(20),
FECHA_COMPRA DATE,
FOREIGN KEY (DNI) REFERENCES CLIENTE (DNI) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (ID_P) REFERENCES PELICULA (ID_P) ON DELETE CASCADE ON UPDATE CASCADE,
PRIMARY KEY (DNI, ID_P));	

INSERT INTO TRABAJADOR VALUES
("ADMIN","ADMIN","Admin",2000,"ADMIN");	

INSERT INTO TRABAJADOR VALUES
('T001', 'ekain1', 'Ekain', 2500.00, 'TRABAJADOR'),
('T002', 'jonander2', 'Jon Ander', 2800.50, 'TRABAJADOR'),
('T003', 'mikel3', 'Mikel', 1900.75, 'TRABAJADOR');

INSERT INTO GENERO VALUES
('G001', 'Acción'),
('G002', 'Comedia'),
('G003', 'Drama'),
('G004', 'Terror');

INSERT INTO PELICULA VALUES
('P001', 'Fust and furious', 8.50, 120, 4.5, 'G001', 'T002'),
('P002', 'Mi Villano Favorito', 7.00, 105, 4.2, 'G002', 'T003'),
('P003', 'Titanic', 6.00, 195, 4.8, 'G003', 'T001'),
('P004', 'Spiderman', 4.00, 110, 4.3, 'G004', 'T002');

INSERT INTO CLIENTE VALUES
('12345678L', 'Leire', 'leire1'),
('12345678R', 'Raquel', 'raquel1'),
('12345678B', 'Bego', 'bego1');

INSERT INTO COMPRA VALUES
('12345678L', 'P001', '2024-03-01'),
('12345678R', 'P002', '2024-03-02'),
('12345678B', 'P003', '2024-03-03'),
('12345678L', 'P004', '2024-03-04');

DELIMITER //


-- 1. Procedimiento para modificar el sueldo de un trabajador
CREATE PROCEDURE MODIFICARSUELDO (IN ID_TR VARCHAR(20), IN NUEVOSUELDO FLOAT)
BEGIN
    UPDATE TRABAJADOR SET SUELDO = NUEVOSUELDO WHERE ID_T = ID_TR;
END;//

CALL MODIFICARSUELDO("T001", 3000.00);

SELECT * FROM TRABAJADOR;

-- 2. Procedimiento para insertar un nuevo trabajador
CREATE PROCEDURE INSERTARTRABAJADOR(IN ID_T_INS VARCHAR(20), IN CONTRASENIA_INS VARCHAR(20), IN NOMBRE_INS VARCHAR(20), IN SUELDO_INS FLOAT, IN TIPO_INS ENUM('ADMIN', 'TRABAJADOR'))
BEGIN
    INSERT INTO TRABAJADOR(ID_T, CONTRASENIA, NOMBRE, SUELDO, TIPO)
    VALUES (ID_T_INS, CONTRASENIA_INS, NOMBRE_INS, SUELDO_INS, TIPO_INS);
END //

CALL INSERTARTRABAJADOR('T004', 'karen4', 'Karen', 1400.00, 'TRABAJADOR');

-- 3. Procedimiento para listar todas las películas usando un cursor
CREATE PROCEDURE LISTARPELICULAS()
BEGIN

    DECLARE NOMBREP VARCHAR(20);
    DECLARE PRECIOP FLOAT;
    DECLARE DURACIONP INT;
    DECLARE CALIFICACIONP FLOAT;
    DECLARE RESULTADO VARCHAR(10000) DEFAULT '';
    DECLARE FIN BOOL DEFAULT 0;
    DECLARE c CURSOR FOR SELECT NOMBRE, PRECIO, DURACION, CALIFICACION FROM PELICULA;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIN = 1;

    OPEN c;
    FETCH c INTO NOMBREP, PRECIOP, DURACIONP, CALIFICACIONP;
    WHILE FIN = 0 DO
        SET RESULTADO = CONCAT(RESULTADO, 'Película: ', NOMBREP, ', Precio: ', PRECIOP , ', Duracion: ', DURACIONP, ', Calificacion: ', CALIFICACIONP, '  |  ');
        FETCH c INTO NOMBREP, PRECIOP, DURACIONP, CALIFICACIONP;
    END WHILE;
    CLOSE c;
    SELECT RESULTADO AS "DATOS DE PELICULAS";
END//

CALL LISTARPELICULAS();

-- 4. Función que recibe el DNI de un cliente y devuelve la cantidad de películas que ha comprado
CREATE FUNCTION MOSTRARPELICULASCOMPRADAS(DNIC CHAR(9)) RETURNS INT
DETERMINISTIC READS SQL DATA
BEGIN
    DECLARE TOTAL INT;
    SELECT COUNT(*) INTO TOTAL FROM COMPRA WHERE DNI = DNIC;
    RETURN TOTAL;
END;//

SELECT MOSTRARPELICULASCOMPRADAS('12345678L');


-- 5. Función que muestra un mensaje u otro dependiendo de si el salario del trabajador es mayor o menor al salario medio.
CREATE FUNCTION SALARIOCOMPARADO(ID_TRA VARCHAR(20))
RETURNS VARCHAR(10000)
DETERMINISTIC
BEGIN
    DECLARE SALARIOMEDIO FLOAT;
    DECLARE SALARIOTRABAJADOR FLOAT;
    DECLARE MENSAJE VARCHAR(10000);
   
    SELECT AVG(SUELDO) INTO SALARIOMEDIO FROM TRABAJADOR;
   
    SELECT SUELDO INTO SALARIOTRABAJADOR FROM TRABAJADOR WHERE ID_T = ID_TRA;
   
    IF SALARIOTRABAJADOR IS NULL THEN
        SET MENSAJE = 'El trabajador no existe.';
    ELSE
        IF SALARIOTRABAJADOR > SALARIOMEDIO THEN
            SET MENSAJE = 'El salario del trabajador es mayor que el salario medio.';
        ELSEIF SALARIOTRABAJADOR < SALARIOMEDIO THEN
            SET MENSAJE = 'El salario del trabajador es menor que el salario medio.';
        ELSE
            SET MENSAJE = 'El salario del trabajador es igual al salario medio.';
        END IF;
    END IF;
    
    RETURN MENSAJE;
END;

SELECT SALARIOCOMPARADO('T001');


-- 6. Función que devuelve la película con mejor calificación
CREATE FUNCTION MEJORPELICULA() RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
    DECLARE MEJOR_NOMBRE VARCHAR(20);
    SELECT NOMBRE INTO MEJOR_NOMBRE FROM PELICULA ORDER BY CALIFICACION DESC LIMIT 1;
    RETURN MEJOR_NOMBRE;
END //

SELECT MEJORPELICULA();


-- 7. Procedimiento para comprar peliculas
CREATE PROCEDURE COMPRARPELICULA(IN DNI_CLIENTE CHAR(9), IN ID_PELICULA VARCHAR(20), IN FECHA DATE)
BEGIN
    DECLARE CLIENTEEXISTE INT;
    DECLARE PELICULAEXISTE INT;
    
    SELECT COUNT(*) INTO CLIENTEEXISTE FROM CLIENTE WHERE DNI = DNI_CLIENTE;
    
    SELECT COUNT(*) INTO PELICULAEXISTE FROM PELICULA WHERE ID_P = ID_PELICULA;
    
    IF CLIENTEEXISTE = 1 AND PELICULAEXISTE = 1 THEN
        INSERT INTO COMPRA (DNI, ID_P, FECHA_COMPRA) 
        VALUES (DNI_CLIENTE, ID_PELICULA, FECHA);
        SELECT 'Compra realizada con éxito' AS COMPRA;
    ELSE
        IF CLIENTEEXISTE = 0 THEN
            SELECT 'Error: El cliente no existe' AS COMPRA;
        ELSE
            SELECT 'Error: La película no existe' AS COMPRA;
        END IF;
    END IF;
END //

CALL COMPRARPELICULA('12345678L', 'P002', '2024-03-24');

-- 8. Procedimiento para obtener el total gastado por un cliente en compras de películas
CREATE PROCEDURE TOTALGASTADOPORCLIENTE(IN DNI_CLIENTE CHAR(9))
BEGIN
    DECLARE TOTALGASTADO FLOAT;
    
    SELECT SUM(P.PRECIO) INTO TOTALGASTADO FROM COMPRA C JOIN PELICULA P ON C.ID_P = P.ID_P WHERE C.DNI = DNI_CLIENTE;
    
    IF TOTALGASTADO IS NULL THEN
        SET TOTALGASTADO = 0;
    END IF;
    
    SELECT TOTALGASTADO AS "Total Gastado";
END //

CALL TOTALGASTADOPORCLIENTE('12345678L');
*/
